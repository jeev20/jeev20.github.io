{
  "hash": "9fdab2c846421bf42b7886bc85b55223",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Video download script\ndescription: \"Automating downloading YouTube videos/audio for personal use\"\nformat: html\ntoc: true\nlang: en\njupyter: python3\nipynb-shell-interactivity: all\nexecute:\n  echo: false\ndate: 2024-06-10\ncategories: [\"automation\"]\ntags: [\"yt-dlp\", \"jellyfin\", \"bash script\"]\ncomments:\n  giscus:\n    repo: jeev20/jeev20.github.io\n---\n\n\nBeing a dad comes with opportunities to automate mundane chores. To curate a sensible kids video collection, I have to download select videos from YouTube. To organize this content, I have recently setup a container running the [jellyfin](https://jellyfin.org) media (offline) server. This exercise of curation and downloading videos manually requires a lot of unnecessary effort and should be have been automated. \n\n \n*Yes, it is time to automate!*\n\n\n### Solution architecture\nBelow is the solution architecture. The input or the video urls are saved on a csv with headers `VideoURL` & `Type`. \n\n\n```{mermaid}\n\n---\ntitle: Video download automation\n---\nflowchart TD\nsubgraph 0[Video download]\n1[RequiredVideos.csv] -.-> |VideoURL, <br> Type| 2[ytDownload.sh<br>yt-dlp]\n\n2 -.->|mkdir| 3[Folder_Category_1]\n\n2 -.->|mkdir| 4[Folder_Category_2]\n2  -.-> |mkdir| 5[Folder_Category_N]\n\n3 -.->|Download video, description, <br> thumbnail, subtitles| 6[Individual_VideoFiles]\nend\n\n6 -.-> |Copy|7\n\nsubgraph Jellyfin server\n        10[Jellyfin_Server]\n        7[Folder_Category_1]\n        8[Folder_Category_2]\n        9[Folder_Category_N]\n    end\n  \nsubgraph Tools used\n11[Bash<br>yt-dlp<br>github <br>Jellyfin]\nend\n```\n\nThis `.csv` file then is an input file to a `bash` script. The `bash` script iterates over the rows in the csv file and uses the [yt-dlp](https://github.com/yt-dlp/yt-dlp.git) project/cli tool to download videos. In short, it will help me build a video collection (for personal use) with minimal resistance. \n\nThe next time when I or my wife want to add a video, we add a row in the `.csv` file with the video url and a corresponding type (category). \n\n\n### ytDownload.sh script \n\n```{.bash}\n#!/bin/bash\n\n# Reading the csv file and using Videos column\nVIDEO_URLS= readarray -t eCollection < <(cut -d, -f1,2 RequiredVideos.csv)\n\n# Set the directory where you want to save the downloaded files\nOUTPUT_DIR=\".\"\n\n# Create the output directory if it doesn't exist\nmkdir -p \"$OUTPUT_DIR\"\n\nfor row in ${eCollection[@]:1} \ndo\nurl=$(echo \"$row\" | cut -d, -f1)\ntypeVideo=$(echo \"$row\" | cut -d, -f2)\necho \"Starting to download : \"$url\" \"\n# Download the video and its subtitles no special characters do not overwrite video if already found(if available)\nyt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]' --write-auto-sub --write-description --sub-lang en --restrict-filename --no-force-overwrites --output \"$typeVideo/%(title)s/%(title)s\" \"$url\"\necho \"Completed download : \"$url\" \"\ndone\n```\n\n\n\n#### Command explanation\n* Get the best video resolution, \n* Best audio quality, \n* Download subtitles if available in english, \n* Download description if available, \n* Remove symbols and special characters from video filename, \n* Skip download if resource already found in target folder, \n* Save to respective `type/videofilename` folder \n\n```{.bash}\nyt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]' --write-auto-sub --write-description \\\n --sub-lang en --restrict-filename --no-force-overwrites --output \"$typeVideo/%(title)s/%(title)s\" \"$url\"\n```\n\n### Further improvements \nThe input `.csv` should be made accessible via a network-attached-storage device which supports a native mobile app. This way we always have access to the input file.\n\nA further step would be to run a cron job on a server to look for new rows added in the `.csv` file and run the script. This will ensure that my `jellyfin` collection is always up-to-date. \n\n\n\n### Credits\n\nThank you to all the maintainers of [yt-dlp](https://github.com/yt-dlp/yt-dlp.git)!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}