{
  "hash": "9999ce20cc6b5b428f05d5082dc2e4aa",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Switching from PIP to UV\ndescription: \"Upgrading my python workflow\"\nformat: html\ntoc: true\nlang: en\njupyter: python3\nipynb-shell-interactivity: all\nexecute:\n  echo: false\ndate: 2025-02-10 16:44 +0100\ncategories: [\"tool\"]\ntags: [\"uv\", \"python\"]\ncomments:\n  giscus:\n    repo: jeev20/jeev20.github.io\n---\n\n\nFor the past 10 years I have constantly depended on python tools such as conda, pip, virtualenv, pyenv and poetry. These tools always made it difficult to master python tooling as I had to remember the CLI commands for each one of them separately. \n\nIn mid 2024, I came across a new tool called UV via an youtube suggestion. The developers built it on Rust, and back then I was very mesmerized by rust. But I did not feel comfortable switching my python workflows to UV right away. \n\nFast forward a year, the latest version of UV made it a complete no-brainer and I have decided to switch over. \n\nTo start a new project I let `uv` create the required boilerplate for me by using the `init` command. \n\n```{.bash}\nuv init myproject --python 3.12.5 && cat pyproject.toml \n```\nThe above command declares also the required python version by using the `--python` argument. To inspect everything is correct, I check the content of `pyproject.toml`\n\n```{.toml}\n[project]\nname = \"myproject\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nreadme = \"README.md\"\nrequires-python = \">=3.12.5\"\ndependencies = []\n```\n\nI never liked how poetry or pyenv by default separated my repository and the virtual environments to different location. This is also possible in UV but not as a default. I like that all my project dependencies are in the project folder. I also no longer need to bother setting up a virtual environment. By adding the below command, `uv` can create a `.venv` environment automatically.\n\n```{.bash}\nuv add requests \n╰─❯\n   Using CPython 3.12.5\n   Creating virtual environment at: .venv\n   Resolved 6 packages in 347ms\n   Installed 5 packages in 5ms\n   + certifi==2025.1.31\n   + charset-normalizer==3.4.1\n   + idna==3.10\n   + requests==2.32.3\n   + urllib3==2.3.0\n\n```\n\nFinally, to run a python script, I no longer need any alias or call python myself. `uv run`command does all that for me. It chooses the virtual environment and python version in the project folder and runs the script.\n\n```{.bash}\nuv run hello.py\n╰─❯ Hello from myproject!\n```\n\n\nAnother great feature is the ability to use `ruff` tool to lint check and format my scripts in seconds!\n\n```{.bash}\nuvx ruff check .\n╰─❯ All checks passed!\n```\n\n```{.bash}\nuvx ruff format .\n╰─❯ 1 file left unchanged\n```\n\nDid I fail to mention all the above commands runs extremely fast when compared to the older python tools? It is fast alright! \nThis gives developers more time to focus on their code base rather than fiddle around with multiple tools just to execute their python scripts.\n\nKudos to the entire team at [Astral](https://docs.astral.sh/). I hope that this open-source project continues being open and does not follow the `Redis` way!\n\nThere are many more commands to explore in `uv` and `uvx` from [UV Cli Commands](https://docs.astral.sh/uv/reference/cli/). \n\n## Resources \nHere are some of the video resources which helped me learn the basic commands in UV and uvx, in no specific order.\n\n   * Feature review from Tim \n   {{< video https://www.youtube.com/embed/ap2sWj5yDIY >}}\n\n\n   * Soft introduction to UV by Arjan\n   {{< video https://www.youtube.com/embed/qh98qOND6MI >}}\n\n\n   * Soft introduction to UV by Ian\n    {{< video https://www.youtube.com/embed/k4qh83m1jg0 >}}\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}