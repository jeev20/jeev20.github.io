{
  "hash": "3173347df09b1e8dbbce5fb64ee0e0a9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Securing Azure Static Webapp using Azure Active Directory\ndescription: A webapp accessible to only authenticated and Azure single tenant users\nauthor: \"Jeevith Hegde\"\ndate: 2025-08-18 07:35 +0200\nformat: html\ntoc: true\nlang: en\njupyter: python3\nipynb-shell-interactivity: all\nexecute:\n  echo: false\ncategories: [\"staticwebapp\"]\ntags: [\"azure\"]\ncomments:\n  giscus:\n    repo: jeev20/jeev20.github.io\n---\n\n\n:::{.callout}\n**Scenario**\n\n**We want only users who are authenticated and who are found in the tenants Azure Active Directory to have access to the static web app**\n:::\n\n\n\nRecently at work I found out that configuring and securing a static web app in azure cloud is not so straightforward as I thought it would be. I had to research a lot using Microsoft documentation/ learn pages, YouTube tutorials and prompting many public LLMs. \n\nTo spare me and you the future hassle, I am documenting this process. This process works as of august 2025, but might change in the future. \n\n\nIf you follow the order in the post, you should have no problem securing your web app with Azure Active Directory. \n\n\n# Things to workthrough\n\nLets assume, you have already created a react based static web application with remote GIT repository either in GitHub or Azure DevOps. \n\nI will walkthrough both AzureDevops and GitHub based deployment using their respective CI/CD pipeline definitions.  \n\n## Step 1-Your source code\nCreate a static web app configuration json file in the root folder of your web application named `staticwebapp.config.json` with the following content.\n\n:::{.callout-note}\nOnly update / replace `<TENANT_ID>` in the json below with your Azure `Tenant ID`. \n\nYou do not need to update / replace the `AZURE_CLIENT_ID` or the `AZURE_CLIENT_SECRET_APP_SETTING_NAME` values in json. These are configured directly in Azure.\n\n:::\n\n```{.json}\n{\n  \"routes\": [\n    {\n      \"route\": \"/*\",\n      \"allowedRoles\": [\"authenticated\"]\n    }\n  ],\n  \"responseOverrides\": {\n    \"401\": {\n      \"statusCode\": 302,\n      \"redirect\": \"/.auth/login/aad\"\n    }\n  },\n\n  \"auth\": {\n    \"identityProviders\": {\n      \"azureActiveDirectory\": {\n        \"registration\": {\n          \"openIdIssuer\": \"https://login.microsoftonline.com/<TENANT_ID>/v2.0\",\n          \"clientIdSettingName\": \"AZURE_CLIENT_ID\",\n          \"clientSecretSettingName\": \"AZURE_CLIENT_SECRET_APP_SETTING_NAME\"\n        }\n      }\n    }\n  }\n}\n```\n\nThat is all that is needed in the source code. Azure will parse and deploy your web app correctly and restrict it to only allocated users in your tenant.\n\n\n### Commit code\nChoose either Github or AzureDevops as your version control tool and commit your changes containing the `staticwebapp.config.json` file.\n\nThis step will also contain all the prerequiste steps of creating a repository or project (Azure Devops) etc. \n\n:::{.callout}\nAt the end of this step, your code should be uploaded to one of the source control platforms and the repository must contain the `staticwebapp.config.json` file.\n:::\n\n\n## Step 2 - Configuration in Azure\n### Creating a static web app \n\n* Choose subscription \n* Choose the resoruce group\n* Give your app a unique name\n* Choose Standard Plan type to allow for custom authentication \n* Choose the code source\n![](images/CreateStaticWebApp.jpg)\n\n  A caveat here is that if you choose to use Azure Devops git repository, then choose `Other`. This is because Azure for some reason does not create any pipeline like it does with Github. So we rather use `other` and create a starter pipeline ourselves in Azure DevOps. \n\n\n  **Important Note** : Microsoft does not provide Azure Active Directory authentication if you choose the free tier. Custom authentication is only supported in the **Standard** tier of a static web app. So choose **Standard** here\n\n\n* In the deployment option use the deployment configuration\n![](images/UseDeploymentTokenAzure.jpg)\n\n* In Advanced Configuration choose a region close to you\n![](images/AdvancedConfiguration.jpg)\n\n* Add relevant tags and click on `Review + create`\n\n\n\n### After static web app is live\n*This step is only needed if you use Azure Devops repository. Skip this if you are using Github* \n\n* Navigate to your Azure Static Web App click on `Overview` side bar menu. Click on `Manage deployment token` tab to open up a token window and copy the `Deployment token`. \n\n  ![](images/DeploymentTokenAzure.png)\n\n\n### Setting up App Registration\n* Create new app registration via `App Registrations`\n![](images/AppRegistration_Create.png)\n\n* We can also add a redirect uri while creating the app registration. We will add more redirect uri this later in this step.\n![](images/NewAppRegistration.png)\n\n  The name of the app registration and the redirect uri can be changed even after creating the app registration.\n\n\n* Navigate to the `Authentication` sidebar menu and set the `login` and `logout` callback urls. In the `Redirect URI Configuration` tab\n\n  We must now set some callback uri's which will redirect the user to login and logout of the application.\n\n  `https://yoursite.azurestaticapps.net/.auth/login/aad/callback`\n  `https://yoursite.azurestaticapps.net/.auth/logout/aad/callback`\n\n\n* Read more about why and how we should configure these callback urls [here](https://learn.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=aad%2Cinvitations)\n![](images/URICallbacks.png)\n\n* Select the `Settings` tab \n* Check the option `ID tokens (used for implicit and hybrid flows)`\n* Check the option `Accounts in this organizational directory only (Default Directory only - Single tenant)`\n\n  ![](images/AuthenticationSettings.png)\n\n\n* Create a secret to be used as `AZURE_CLIENT_SECRET_APP_SETTING_NAME` in the static web app (enviornment variable)\n\n  ![](images/AppRegistration_Secret.png)\n\n* Note down / copy the secret value for later use.\n\n* Note down / copy the `Application ID`  from the overview page. \n\n  ![](images/GettingApplicationID.png)\n\n\n\n### Setting enviornmental variables in the static web app\n* Navigate to your static web app and choose `Environment variables` from the left menu bar. \n* Click on `Add` write `AZURE_CLIENT_ID` as key and paste the value of `Application ID` from the previous step. \n* Click on `Add` write `AZURE_CLIENT_SECRET_APP_SETTING_NAME` as key and paste the value of the secret from the previous step.\n  ![](images/EnvironmentVariables.png)\n\n\n:::{.callout-note}\nI have also had success by just adding the value to the `AZURE_CLIENT_ID`= `Application ID` and leaving the `AZURE_CLIENT_SECRET_APP_SETTING_NAME = ` value empty. \n\nIn my opinion, this is a better way to configure your static app since you do not need to add the secret's value as an environment variable. \n:::\n\nNow we have provided values to the placeholders in the `staticwebapp.config.json` file.\n\n\n\n## Step 3 - Configuration in version control\n### Azure devops\n\n* Create a starter CI pipeline and link it to the required repository and branch in your Azure Devops project\n\n\n\n\n  ```{.yaml}\n  trigger:\n  - dev  # Choose the branch \n\n  pool:\n    vmImage: 'ubuntu-latest'\n\n  steps:\n  - task: AzureStaticWebApp@0\n    inputs:\n      app_location: \"/\"   # Root of your app source code\n      api_location: \"\"    # Location of API source code if any\n      output_location: \"build\"   # Location of build output folder or dist \n      azure_static_web_apps_api_token: $(deployment_token)  # Deployment token stored as secret or pipeline variable\n  ```\n* Choose which git branch should trigger the CI/CD pipeline\n\n* Create a pipeline variable and name it `deployment_token`.\n* In the value, paste the `deployment_token` you copied from the overview page of your Azure static webapp \n\n\n### Github \n\nThis is the content of the yaml file created automatically by Azure when we choose github as code source while creating the static web app.\n\n`CREATEDBYAZURESTATICWEBAPPAUTOMATICALLY` string is a placeholder below, which Azure is responsible for creating.\n\nAzure automatically sends a commit to Github and creates a file `.github\\workflows\\AUTOMATICNAME.yaml` in your code repository with the following actions.\n\n```{.yaml}\nname: Azure Static Web Apps CI/CD\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    types: [opened, synchronize, reopened, closed]\n    branches:\n      - main\n\njobs:\n  build_and_deploy_job:\n    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')\n    runs-on: ubuntu-latest\n    name: Build and Deploy Job\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          submodules: true\n          lfs: false\n      - name: Build And Deploy\n        id: builddeploy\n        uses: Azure/static-web-apps-deploy@v1\n        with:\n          azure_static_web_apps_api_token: ${{ secrets.CREATEDBYAZURESTATICWEBAPPAUTOMATICALLY }}\n          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)\n          action: \"upload\"\n          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######\n          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig\n          app_location: \"/\" # App source code path\n          api_location: \"\" # Api source code path - optional\n          output_location: \"dist\" # Built app content directory - optional\n          ###### End of Repository/Build Configurations ######\n\n  close_pull_request_job:\n    if: github.event_name == 'pull_request' && github.event.action == 'closed'\n    runs-on: ubuntu-latest\n    name: Close Pull Request Job\n    steps:\n      - name: Close Pull Request\n        id: closepullrequest\n        uses: Azure/static-web-apps-deploy@v1\n        with:\n          azure_static_web_apps_api_token: ${{ secrets.CREATEDBYAZURESTATICWEBAPPAUTOMATICALLY }}\n          action: \"close\"\n\n\n```\n\n\n**If you followed along, you should now have a secure static web app hosted in Azure!**\n\n\n# Resources\n### Microsoft Documentation\n[Azure Static App Custom Authentication](https://learn.microsoft.com/en-us/azure/static-web-apps/authentication-custom?tabs=aad%2Cinvitations)\n\n[Configure Azure Static Web Apps](https://learn.microsoft.com/en-us/azure/static-web-apps/configuration)\n\n\n### YouTube videos\n\nBuild a website using Azure Static Web Apps and Authenticate with AAD \n{{< video https://www.youtube.com/embed/jnwRpEM6GR8 >}}\n  \n\nQuarto With Authentication Is Easier Than You Think (with Azure) \n{{< video https://www.youtube.com/embed/U7bUeDonv7E >}}\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}