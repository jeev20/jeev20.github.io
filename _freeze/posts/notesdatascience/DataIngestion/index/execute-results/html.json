{
  "hash": "b701b0078a60745e12b8b5a9b848aef9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Data ingestion\nformat: html\ntoc: true\nlang: en\njupyter: python3\nipynb-shell-interactivity: all\nexecute:\n  echo: false\ndate: 2025-08-11 \ncategories: [\"ds notes\"]\ntags: [\"ds\"]\n\ncomments:\n  giscus:\n    repo: jeev20/jeev20.github.io\n---\n\n\n## Getting the data\nThe location of the data depends on ones use-case. Some have it locally, others on the cloud in a storage bucket or database. There is always a way to get your data to your development environment. The way we get it will differ. \n\nIn this notes, I use the `kagglehub` module to get a time series dataset. \n\n```{.python}\nimport kagglehub\n# Download latest version\npath = kagglehub.dataset_download(\"garystafford/environmental-sensor-data-132k\")\nprint(\"Path to dataset files:\", path)\n```\n\n## Decrease data size\nOne needs to evaluate the size of the dataset and the resources available to process the data. One way og limiting the size of the data is to use effecient file formats.\n\nData formatted as Comma Seperated Value (CSV) is everywhere, but it is not the most lighweight or fast format when it comes read/write from disks. So it is wise to convert large CSV files to formats which are faster and take lesser space on disk/memory. One such format is [`parquet`](https://www.databricks.com/glossary/what-is-parquet). \n\nWe can always decrease the data size to make ingestion easier. So we use polars to convert it to paraquet format. \n\n::: {#590e56dc .cell execution_count=1}\n``` {.python .cell-code}\n%%time\nimport polars as pl\n\ninput_data_path = f\"../data/iot/iot_telemetry_data.parquet\"\ndf = pl.scan_csv(\"../data/iot/iot_telemetry_data.csv\")\ndf.sink_parquet(input_data_path)  # Saves the lazyframe as a parquet file\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU times: user 478 ms, sys: 76.3 ms, total: 554 ms\nWall time: 133 ms\n```\n:::\n:::\n\n\nFor small size datasets pandas and polars will do fine. As the dataset size increases, we need to look for effecient ways to read and prosess our data. In python, DuckDb and Pyspark are the best performing ETL libraries for large datasets. \n\nThat said, output from both DuckDb and Pyspark are not directly compatible with visualization libraries or other third party modules, for example, `pandas-profiling`. \n\nSo a hybrid approach is required, where the transformations are made using DuckDb or Pyspark, but the output is later converted to either polars or pandas dataframes. This allows us to efficiently perform ETL operations, but still be compatible with visualization libraries via polars or pandas formats. \n\n\n\n## Using pandas\n\n::: {#ad86310e .cell execution_count=2}\n``` {.python .cell-code}\n%%time\nimport pandas as pd\n\npd_df =  pd.read_parquet(input_data_path)\npd_df.head(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU times: user 115 ms, sys: 31.9 ms, total: 147 ms\nWall time: 49.4 ms\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ts</th>\n      <th>device</th>\n      <th>co</th>\n      <th>humidity</th>\n      <th>light</th>\n      <th>lpg</th>\n      <th>motion</th>\n      <th>smoke</th>\n      <th>temp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.594512e+09</td>\n      <td>b8:27:eb:bf:9d:51</td>\n      <td>0.004956</td>\n      <td>51.0</td>\n      <td>False</td>\n      <td>0.007651</td>\n      <td>False</td>\n      <td>0.020411</td>\n      <td>22.700000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.594512e+09</td>\n      <td>00:0f:00:70:91:0a</td>\n      <td>0.002840</td>\n      <td>76.0</td>\n      <td>False</td>\n      <td>0.005114</td>\n      <td>False</td>\n      <td>0.013275</td>\n      <td>19.700001</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Using Polars\n\n::: {#2a161169 .cell execution_count=3}\n``` {.python .cell-code}\n%%time\nimport polars as pl\n\npl_df =  pl.scan_parquet(input_data_path)\npl_df.head(2).collect()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU times: user 9.31 ms, sys: 1.02 ms, total: 10.3 ms\nWall time: 9.55 ms\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (2, 9)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>ts</th><th>device</th><th>co</th><th>humidity</th><th>light</th><th>lpg</th><th>motion</th><th>smoke</th><th>temp</th></tr><tr><td>f64</td><td>str</td><td>f64</td><td>f64</td><td>bool</td><td>f64</td><td>bool</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>1.5945e9</td><td>&quot;b8:27:eb:bf:9d:51&quot;</td><td>0.004956</td><td>51.0</td><td>false</td><td>0.007651</td><td>false</td><td>0.020411</td><td>22.7</td></tr><tr><td>1.5945e9</td><td>&quot;00:0f:00:70:91:0a&quot;</td><td>0.00284</td><td>76.0</td><td>false</td><td>0.005114</td><td>false</td><td>0.013275</td><td>19.700001</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Using Duckdb\n\n::: {#b03a7416 .cell execution_count=4}\n``` {.python .cell-code}\n%%time\nimport duckdb \n\nresult = duckdb.sql(f\"SELECT * FROM '{input_data_path}'\")\nresult.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n┌────────────────────┬───────────────────┬───────────────────────┬───────────────────┬─────────┬───────────────────────┬─────────┬──────────────────────┬────────────────────┐\n│         ts         │      device       │          co           │     humidity      │  light  │          lpg          │ motion  │        smoke         │        temp        │\n│       double       │      varchar      │        double         │      double       │ boolean │        double         │ boolean │        double        │       double       │\n├────────────────────┼───────────────────┼───────────────────────┼───────────────────┼─────────┼───────────────────────┼─────────┼──────────────────────┼────────────────────┤\n│ 1594512094.3859746 │ b8:27:eb:bf:9d:51 │  0.004955938648391245 │              51.0 │ false   │   0.00765082227055719 │ false   │  0.02041127012241292 │               22.7 │\n│ 1594512094.7355676 │ 00:0f:00:70:91:0a │ 0.0028400886071015706 │              76.0 │ false   │  0.005114383400977071 │ false   │ 0.013274836704851536 │ 19.700000762939453 │\n│ 1594512098.0735729 │ b8:27:eb:bf:9d:51 │  0.004976012340421658 │              50.9 │ false   │  0.007673227406398091 │ false   │  0.02047512557617824 │               22.6 │\n│  1594512099.589146 │ 1c:bf:ce:15:ec:4d │  0.004403026829699689 │ 76.80000305175781 │ true    │  0.007023337145877314 │ false   │ 0.018628225377018803 │               27.0 │\n│  1594512101.761235 │ b8:27:eb:bf:9d:51 │  0.004967363641908952 │              50.9 │ false   │  0.007663577282372411 │ false   │ 0.020447620810233658 │               22.6 │\n│ 1594512104.4684107 │ 1c:bf:ce:15:ec:4d │  0.004391003954583357 │  77.9000015258789 │ true    │  0.007009458543138704 │ false   │  0.01858890754005078 │               27.0 │\n│ 1594512105.4488637 │ b8:27:eb:bf:9d:51 │  0.004976025118224167 │              50.9 │ false   │  0.007673241660297752 │ false   │ 0.020475166204362245 │               22.6 │\n│  1594512106.869076 │ 00:0f:00:70:91:0a │ 0.0029381156266604295 │              76.0 │ false   │  0.005241481841731117 │ false   │ 0.013627521132019194 │ 19.700000762939453 │\n│ 1594512108.2753816 │ 1c:bf:ce:15:ec:4d │  0.004345471359573249 │  77.9000015258789 │ true    │  0.006956802377235561 │ false   │  0.01843978190211682 │               27.0 │\n│ 1594512109.1366868 │ b8:27:eb:bf:9d:51 │ 0.0049702557644185795 │              50.9 │ false   │ 0.0076668047981169295 │ false   │ 0.020456819607064126 │               22.6 │\n│          ·         │         ·         │            ·          │                ·  │  ·      │           ·           │   ·     │           ·          │                 ·  │\n│          ·         │         ·         │            ·          │                ·  │  ·      │           ·           │   ·     │           ·          │                 ·  │\n│          ·         │         ·         │            ·          │                ·  │  ·      │           ·           │   ·     │           ·          │                 ·  │\n│  1594528617.316101 │ 1c:bf:ce:15:ec:4d │  0.004046021057852555 │ 76.80000305175781 │ true    │ 0.0066065967976340415 │ false   │ 0.017449961409724143 │ 25.700000762939453 │\n│ 1594528620.1956518 │ 00:0f:00:70:91:0a │  0.002656364232179544 │ 75.80000305175781 │ false   │  0.004872844318332629 │ false   │  0.01260624929176923 │ 19.399999618530273 │\n│ 1594528620.5726128 │ b8:27:eb:bf:9d:51 │  0.004838697447060515 │              52.7 │ false   │  0.007519458225661741 │ false   │ 0.020037135448620128 │               22.1 │\n│  1594528623.834102 │ 1c:bf:ce:15:ec:4d │   0.00405307240177605 │ 76.80000305175781 │ true    │  0.006614923978741507 │ false   │ 0.017473456575501277 │ 25.700000762939453 │\n│ 1594528624.2579694 │ b8:27:eb:bf:9d:51 │  0.004859394667370261 │              52.6 │ false   │  0.007542712063759859 │ false   │ 0.020103331890812447 │               22.0 │\n│   1594528626.16313 │ 00:0f:00:70:91:0a │  0.002612589347788125 │ 75.69999694824219 │ false   │  0.004814621044662395 │ false   │ 0.012445419108693902 │ 19.399999618530273 │\n│ 1594528627.9447663 │ b8:27:eb:bf:9d:51 │ 0.0048428875642098305 │              52.6 │ false   │  0.007524168143299383 │ false   │  0.02005054199296001 │               22.0 │\n│ 1594528631.8750868 │ b8:27:eb:bf:9d:51 │  0.004855276661403902 │              52.6 │ false   │  0.007538087568901512 │ false   │ 0.020090166282918154 │               22.0 │\n│ 1594528631.9181976 │ 1c:bf:ce:15:ec:4d │   0.00405307240177605 │ 76.80000305175781 │ true    │  0.006614923978741507 │ false   │ 0.017473456575501277 │ 25.700000762939453 │\n│  1594528635.561384 │ b8:27:eb:bf:9d:51 │     0.004833237960391 │              52.6 │ false   │  0.007513319775311182 │ false   │ 0.020019663516957425 │               22.0 │\n├────────────────────┴───────────────────┴───────────────────────┴───────────────────┴─────────┴───────────────────────┴─────────┴──────────────────────┴────────────────────┤\n│ ? rows (>9999 rows, 20 shown)                                                                                                                                    9 columns │\n└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘\n\nCPU times: user 93 ms, sys: 4.04 ms, total: 97 ms\nWall time: 97 ms\n```\n:::\n:::\n\n\n## Using pyspark\n\n::: {#de4f4eda .cell execution_count=5}\n``` {.python .cell-code}\n%%time\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName(\"readParquet\").getOrCreate()\ndf = spark.read.parquet(input_data_path)\ndf.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n+--------------------+-----------------+--------------------+-----------------+-----+--------------------+------+--------------------+------------------+\n|                  ts|           device|                  co|         humidity|light|                 lpg|motion|               smoke|              temp|\n+--------------------+-----------------+--------------------+-----------------+-----+--------------------+------+--------------------+------------------+\n|1.5945120943859746E9|b8:27:eb:bf:9d:51|0.004955938648391245|             51.0|false| 0.00765082227055719| false| 0.02041127012241292|              22.7|\n|1.5945120947355676E9|00:0f:00:70:91:0a|0.002840088607101...|             76.0|false|0.005114383400977071| false|0.013274836704851536|19.700000762939453|\n|1.5945120980735729E9|b8:27:eb:bf:9d:51|0.004976012340421658|             50.9|false|0.007673227406398091| false| 0.02047512557617824|              22.6|\n| 1.594512099589146E9|1c:bf:ce:15:ec:4d|0.004403026829699689|76.80000305175781| true|0.007023337145877314| false|0.018628225377018803|              27.0|\n| 1.594512101761235E9|b8:27:eb:bf:9d:51|0.004967363641908952|             50.9|false|0.007663577282372411| false|0.020447620810233658|              22.6|\n|1.5945121044684107E9|1c:bf:ce:15:ec:4d|0.004391003954583357| 77.9000015258789| true|0.007009458543138704| false| 0.01858890754005078|              27.0|\n|1.5945121054488637E9|b8:27:eb:bf:9d:51|0.004976025118224167|             50.9|false|0.007673241660297752| false|0.020475166204362245|              22.6|\n| 1.594512106869076E9|00:0f:00:70:91:0a|0.002938115626660...|             76.0|false|0.005241481841731117| false|0.013627521132019194|19.700000762939453|\n|1.5945121082753816E9|1c:bf:ce:15:ec:4d|0.004345471359573249| 77.9000015258789| true|0.006956802377235561| false| 0.01843978190211682|              27.0|\n|1.5945121091366868E9|b8:27:eb:bf:9d:51|0.004970255764418...|             50.9|false|0.007666804798116...| false|0.020456819607064126|              22.6|\n| 1.594512112798518E9|b8:27:eb:bf:9d:51|0.004960208655965963|             50.9|false|0.007655590313556344| false| 0.02042485815208522|              22.6|\n|1.5945121152885423E9|1c:bf:ce:15:ec:4d| 0.00438304383734993|             78.0| true|0.007000264000767255| false|0.018562862485791535|              27.0|\n|1.5945121164982603E9|b8:27:eb:bf:9d:51|0.004971644949355083|             50.9|false|0.007668354899155367| false|0.020461237669931027|              22.6|\n|1.5945121190980136E9|1c:bf:ce:15:ec:4d|0.004451497630812575|             78.0| true|0.007079183500131396| false|0.018786490564423525|              27.0|\n| 1.594512120184931E9|b8:27:eb:bf:9d:51|0.004964564518477901|             50.9|false|0.007660453055613286| false|0.020438716650667384|              22.6|\n|1.5945121227857318E9|00:0f:00:70:91:0a|0.002905014756555...|75.80000305175781|false|0.005198697479294309| false|0.013508733329556249|19.700000762939453|\n|1.5945121238726196E9|b8:27:eb:bf:9d:51|0.004975983419764024|             50.9|false|0.007673195144776...| false| 0.02047503362023219|              22.6|\n|1.5945121275601885E9|b8:27:eb:bf:9d:51|0.004960208655965963|             50.9|false|0.007655590313556344| false| 0.02042485815208522|              22.6|\n| 1.594512129374153E9|1c:bf:ce:15:ec:4d|0.004439322766059633| 77.9000015258789| true|0.007065171934738014| false| 0.01874677460984377|              27.0|\n|1.5945121312478008E9|b8:27:eb:bf:9d:51|0.004956119201656337|             50.9|false|0.007651023905784...| false|0.020411844733363067|              22.6|\n+--------------------+-----------------+--------------------+-----------------+-----+--------------------+------+--------------------+------------------+\nonly showing top 20 rows\nCPU times: user 66.5 ms, sys: 28.6 ms, total: 95.2 ms\nWall time: 12.9 s\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}