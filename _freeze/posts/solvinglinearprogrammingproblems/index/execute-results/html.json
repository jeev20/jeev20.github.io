{
  "hash": "73c8e3cb81f6ca948d912bcc79216ef2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Solving linear programming problems\nformat: html\ntoc: true\nlang: en\njupyter: python3\nipynb-shell-interactivity: all\nexecute:\n  echo: false\ndate: 2024-05-19\ncategories: [\"optimization\"]\ntags: [ \"linear programming\", \"pulp\"]\ncomments:\n  giscus:\n    repo: jeev20/jeev20.github.io\n---\n\n\nAt work a presentation on an optimization problem was made by researches working in the local hospital. They were looking to minimizing staffing resources given certain variables and constraints. \n\nThe field which studies such problems is called Linear Programming (LP). I remember studying this vaguely during my bachelors in industrial engineering, but since then I have forgotten the basics of it. \n\nConsider a case of staffing a hospital. Nurses and doctors are expected to working in shifts, but as the rest of us they too may have personal commitments which have to be taken into consideration when planning for resource planning. Some of them may be specialists in one form of care so they cannot not easily be replaced by others from the resource pool. \n\nNow such problems are where linear programming can be useful. \n\nIn the above case, we are trying to maximize resource utilization while considering the dynamic nature of resource availability and skills. We also need to adhere to the constraint of minimum required resources for smooth operations. \n\nA visual representation of components involved in linear programming. \n\n---------------------------------------------\n\n```{mermaid}\n---\ntitle: Components within linear programming\n---\nstateDiagram-v2 \ndirection LR\n[*]--> Decision_Variables\nnote left of Decision_Variables\n    Output influencing variables\nend note\n[*]--> Constraints\nnote left of Constraints\n    Defined limitations\nend note\nDecision_Variables --> Objective_Function \nnote right of Objective_Function\n    Quantitatively calculable\nend note\nConstraints --> Objective_Function\nObjective_Function -->Optimal_Solution:Linear Solver\nnote right of Optimal_Solution\n    Solution given the other three components\nend note\nOptimal_Solution -->[*]\n\n```\n\n----------------------------------------------\n\n::: {.callout-note}\n\nIn summary, linear programming is used to find an optimal solution given the variables of the system and adhering to the constraints which define the limitations within the system. The end goal is to either maximize or minimize an objective function. \n\n:::\n\n\n## Modules in python\n[PluP](https://pypi.org/project/PuLP/), [Docplex](https://pypi.org/project/docplex/),  [Pyomo](https://pypi.org/project/Pyomo/) and [Gekko](https://pypi.org/project/gekko/) are some of the well known python modules used to solve linear programming problems. \n\nLP solvers are independent of the python modules, as many LP solvers are openly available and the python modules have built an api over these solvers to make it easier to integrate in python. \n\n\n## Example problems\nSolving some problems without external help. I tested my understanding after watching videos to learn the concept. Problem 1 and Problem 2 are credited to [Byjus](https://byjus.com/maths/linear-programming/#components). Although, I am not totally certain about the origin of these questions (may not be a primary source).\n\n### Problem 1 - Vitamin blending\n*A doctor wishes to mix two types of Dishes in such a way that the vitamin contents of the mixture contain at least 8 units of vitamin A and 10 units of vitamin C. Dish 1 contains 2 units/kg of vitamin A and 1 unit/kg of vitamin C. Dish 2 contains 1 unit/kg of vitamin A and 2 units/kg of vitamin C. It costs Kr 50 per kg to purchase Dish 1 and Kr 70 per kg to purchase Dish 2. Formulate this problem as a linear programming problem to minimize the cost of such a mixture*\n\n#### Intuition\n> Formulating the  problem. Before we do that we create a table to make this easier. \nThis [video](https://www.youtube.com/watch?v=_ewPTxICHHA&list=PLbxFfU5GKZz1Tm_9RR5M_uvdOXpJJ8LC3&index=31) was of good to understand and build an intuition. \n{: .prompt-tip}\n\n|           | Vitamin A (units) | Vitamin C (units) | Cost (Kr)|\n|-----------|-------------|--------|---------|\n|Dish 1    |   2     |     1     |   50|\n|Dish 2   |    1    |     2      |  70|\n|Daily need  | 8    |     10|\n\nFor simplicity `Vitamin A = x Vitamin C = y`\n\n**Variables** `x, y daily feed in units`\n\n**Objective function**: `f(x, y) = 50*x + 70*y` --> Minimzation problem\n\n**Subject to constraints**:\n```\n2*x + 1*y >= 8\n1*x + 2*y >= 10\nx >=0\ny >= 0\n``` \n#### Python implementation\n\n::: {#b677a3cd .cell execution_count=1}\n``` {.python .cell-code}\n%%time\n\nimport pulp   \n\n# Creating LP problem\n\"\"\"\nHere we are looking to minimize the cost while getting the enough of vitamin a and c in the diet. This is therefore a minimization LP problem.\n\"\"\"\nvitamin_mix_lp = pulp.LpProblem(\"vitamin_mix_lp\", pulp.LpMinimize)\n\n# Creating LPvariables\nx = pulp.LpVariable(\"Dish 1\", lowBound=0, cat='Integer')\ny = pulp.LpVariable(\"Dish 2\", lowBound=0, cat='Integer')\n\n# Creating Constraints: Mixture contain at least 8 units of vitamin A and 10 units of vitamin C\nvitamin_mix_lp += 2*x + 1*y >=8\nvitamin_mix_lp += 1*x + 2*y >= 10\nvitamin_mix_lp += x >= 0\nvitamin_mix_lp += y >=0\n\n# Creating the objective function: f(x, y) = 50*x + 70*y\nvitamin_mix_lp += 50*x + 70*y\n\n# Solving the objective function\nsolution = vitamin_mix_lp.solve()\n\n# Printing the results and optimal variable values\nprint(\"Status:\", solution) # 1: Optimal solution exists\nprint(\"Optimal Solution Value:\", vitamin_mix_lp.objective.value(), \"Kr.\")\nfor var in vitamin_mix_lp.variables():\n    print(var.name, \"=\", var.varValue, \"units\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWelcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /home/wslap/Documents/Automata/.venv/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/e238c63264be4cfc93d408923a074fa8-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/e238c63264be4cfc93d408923a074fa8-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 380 - 0.00 seconds\nCgl0003I 0 fixed, 2 tightened bounds, 0 strengthened rows, 0 substitutions\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 9.9999\nCbc0012I Integer solution of 380 found by greedy cover after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 380, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 380 to 380\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                380.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: 1\nOptimal Solution Value: 380.0 Kr.\nDish_1 = 2.0 units\nDish_2 = 4.0 units\nCPU times: user 419 μs, sys: 977 μs, total: 1.4 ms\nWall time: 4.91 ms\n```\n:::\n:::\n\n\n**Output** from the above problem results in 2 units of dish 1 and 4 units of dish 2, which results in the minimum cost of 380 kroner while adhering to the set constraints. \n\n```{.bash}\nStatus: 1 (optimal solution exists)\nOptimal Solution Value: 380.0 Kr.\nDish_1 = 2.0 units\nDish_2 = 4.0 units\n```\n\n-------------------------\n\n### Problem 2 - Bakery case\n\n*One kind of cake requires 200g of flour and 25g of fat, and another kind of cake requires 100g of flour and 50g of fat.  Formulate this problem as a linear programming problem to find the maximum number of cakes that can be made from 5kg of flour and 1 kg of fat assuming that there is no shortage of the other ingredients used in making the cakes.*\n\n#### Intuition\n> Formulating the problem. We here are trying maximize the amount of cakes baked given the limited supplies. \n{: .prompt-tip}\n\n|           | Flour (grams) | Fat (grams) | \n|-----------|-------------|--------|\n|Cake A    |   200     |     25     |  \n|Cake B   |    100    |     50      |  \n|Availability  | 5000    |     1000|\n\nFor simplicity `Flour = x & Fat = y`\n\n**Variables** `x, y in grams`\n\n**Objective function**: `f(x, y) = SUM((200*x + 100*y),(25*x + 50*y))` --> Maximization problem\n\n**Subject to constraints**:\n```\n200*x + 100*y <= 5000\n25*x + 50*y <= 1000\nx >=0\ny >= 0\n```\n\n#### Python implementation\n\n::: {#d10887f0 .cell execution_count=2}\n``` {.python .cell-code}\n%%time\nimport pulp   \n\n# Creating LP problem: Here we are looking to maximize the objective function.\nbakery_lp = pulp.LpProblem(\"bakery_lp\", pulp.LpMaximize)\n\n# Creating LPvariables\nx = pulp.LpVariable(\"Cake A\", lowBound=0, cat='Integer')\ny = pulp.LpVariable(\"Cake B\", lowBound=0, cat='Integer')\n\n# Creating Constraints:number of cakes that can be made from 5kg of flour and 1 kg of fat\nbakery_lp += 200*x + 100*y <= 5000\nbakery_lp += 25*x + 50*y <= 1000\nbakery_lp += x >= 0\nbakery_lp += y >=0\n\n# Creating the objective function: f(x, y) = (200*x + 100*y)+(25*x + 50*y)\nbakery_lp += (200*x + 100*y)+(25*x + 50*y)\n\n# Solving the objective function\nsolution = bakery_lp.solve()\n\n# Printing the results and optimal variable values\nprint(\"Status:\", solution) # 1: Optimal solution exists\nprint(\"Optimal Solution Value:\", bakery_lp.objective.value())\nfor var in bakery_lp.variables():\n    print(var.name, \"=\", var.varValue, \"units\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWelcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /home/wslap/Documents/Automata/.venv/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/452836a41a3147e080317e989404b701-pulp.mps -max -timeMode elapsed -branch -printingOptions all -solution /tmp/452836a41a3147e080317e989404b701-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 9 COLUMNS\nAt line 22 RHS\nAt line 27 BOUNDS\nAt line 30 ENDATA\nProblem MODEL has 4 rows, 2 columns and 6 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 6000 - 0.00 seconds\nCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elements\nCutoff increment increased from 1e-05 to 74.9999\nCbc0012I Integer solution of -6000 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective -6000, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from -6000 to -6000\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                6000.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: 1\nOptimal Solution Value: 6000.0\nCake_A = 20.0 units\nCake_B = 10.0 units\nCPU times: user 1.35 ms, sys: 0 ns, total: 1.35 ms\nWall time: 4.35 ms\n```\n:::\n:::\n\n\n**Output** from the above problem results in 20 units of cake 1 and 10 units of cake 2, which results in the maximum revenue of 6000 kroner while adhering to the set constraints. Totally 30 cakes need to be baked by the baker.\n\n```{.bash}\nStatus: 1\nOptimal Solution Value: 6000 kr.\nCake_A = 20.0 units\nCake_B = 10.0 units\n```\n\n-------------------------\n\n### Problem 3 - Protein intake \nThis problem is sourced from [Brilliant.org](https://brilliant.org/wiki/linear-programming/)\n\n*An amateur bodybuilder is looking for supplement protein bars to build his muscle fast, and there are 2 available products: protein bar A and protein bar B.\nEach protein bar A contains 15 g of protein and 30 g of carbohydrates and has total 200 calories. On the other hand, each protein bar B contains 30 g of protein and 20 g of carbohydrates and has total 240 calories.\nAccording to his nutritional plan, this bodybuilder needs at least 20,000 calories from these supplements over the month, which must comprise of at least 1,800 g of protein and at least 2,200 g of carbohydrates.\nIf each protein bar A costs $3 and each protein bar B costs $4, what is the least possible amount of money (in $) he can spend to meet all his one-month requirements?*\n\n\n#### Intuition\n> Formulating the problem. We here are trying maximize the amount of cakes baked given the limited supplies. \n{: .prompt-tip}\n\n|           | Protein (grams) | Carbohydrates (grams) | Calories     | Cost ($)|\n|-----------|-------------|--------|--------|--------|\n|Protein A    |   15     |     30     |  200 |    3 |   \n|Protein B   |    30    |     20      | 240 |     4 |\n|Need  | 1800    |     2200 | 20000|    |\n\nFor simplicity `Protein A = x & Protein B = y`\n\n**Variables** `x, y` \n\n**Objective function**: `f(x, y) = (3*x + 4*y)` --> Minimization problem\n\n**Subject to constraints**:\n```\n15*x + 30*y >= 1800\n30*x + 20*y >= 2200\n200*x + 240*y >= 20000\nx >= 0\ny >= 0\n```\n\n#### Python implementation\n\n::: {#ebad4956 .cell execution_count=3}\n``` {.python .cell-code}\n%%time\nimport pulp   \n\n# Creating LP problem: Here we are looking to minimize the objective function.\nbodybuilderdiet_lp = pulp.LpProblem(\"bodybuilderdiet_lp\", pulp.LpMinimize)\n\n# Creating LPvariables\nx = pulp.LpVariable(\"Protein\", lowBound=0, cat='Integer')\ny = pulp.LpVariable(\"Carbohydrates\", lowBound=0, cat='Integer')\n\n# Creating Constraints\nbodybuilderdiet_lp += 15*x + 30*y >= 1800\nbodybuilderdiet_lp += 30*x + 20*y >= 2200\nbodybuilderdiet_lp += 200*x + 240*y >= 20000\nbodybuilderdiet_lp += x >= 0\nbodybuilderdiet_lp += y >=0\n\n# Creating the objective function: f(x, y) = (3*x + 4*y)\nbodybuilderdiet_lp += 3*x + 4*y\n\n# Solving the objective function\nsolution = bodybuilderdiet_lp.solve()\n\n# Printing the results and optimal variable values\nprint(\"Status:\", solution) # 1: Optimal solution exists\nprint(\"Optimal Solution Value:\", bodybuilderdiet_lp.objective.value())\nfor var in bodybuilderdiet_lp.variables():\n    print(var.name, \"=\", var.varValue, \"units\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWelcome to the CBC MILP Solver \nVersion: 2.10.3 \nBuild Date: Dec 15 2019 \n\ncommand line - /home/wslap/Documents/Automata/.venv/lib/python3.10/site-packages/pulp/apis/../solverdir/cbc/linux/i64/cbc /tmp/ac520e441766402e9fe64da20b64f64c-pulp.mps -timeMode elapsed -branch -printingOptions all -solution /tmp/ac520e441766402e9fe64da20b64f64c-pulp.sol (default strategy 1)\nAt line 2 NAME          MODEL\nAt line 3 ROWS\nAt line 10 COLUMNS\nAt line 25 RHS\nAt line 31 BOUNDS\nAt line 34 ENDATA\nProblem MODEL has 5 rows, 2 columns and 8 elements\nCoin0008I MODEL read with 0 errors\nOption for timeMode changed from cpu to elapsed\nContinuous objective value is 310 - 0.00 seconds\nCgl0003I 0 fixed, 2 tightened bounds, 0 strengthened rows, 0 substitutions\nCgl0004I processed model has 3 rows, 2 columns (2 integer (0 of which binary)) and 6 elements\nCutoff increment increased from 1e-05 to 0.9999\nCbc0012I Integer solution of 310 found by greedy cover after 0 iterations and 0 nodes (0.00 seconds)\nCbc0001I Search completed - best objective 310, took 0 iterations and 0 nodes (0.00 seconds)\nCbc0035I Maximum depth 0, 0 variables fixed on reduced cost\nCuts at root node changed objective from 310 to 310\nProbing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nGomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nKnapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nClique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nMixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nFlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nTwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\nZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)\n\nResult - Optimal solution found\n\nObjective value:                310.00000000\nEnumerated nodes:               0\nTotal iterations:               0\nTime (CPU seconds):             0.00\nTime (Wallclock seconds):       0.00\n\nOption for printingOptions changed from normal to all\nTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00\n\nStatus: 1\nOptimal Solution Value: 310.0\nCarbohydrates = 25.0 units\nProtein = 70.0 units\nCPU times: user 1.27 ms, sys: 28 μs, total: 1.3 ms\nWall time: 4.52 ms\n```\n:::\n:::\n\n\n**Output** from the above problem results in 25 units of Carbohydrates and 70 units of Protein, which results in the minimum expense of 310 dollars while adhering to the set constraints. \n\n\n```{.bash}\nStatus: 1\nOptimal Solution Value: 310.0 $\nCarbohydrates = 25.0 units\nProtein = 70.0 units\n```\n\n## Resources \nHere are some of the resources which helped me learn the concepts of linear programming with no specific order.\n\nI enjoyed reading [this to dig deeper into the workings of LP](https://www.uky.edu/~dsianita/300/online/LP.pdf)\n\n   \n\n   Video tutorials on linear programming \n   {{< video https://www.youtube.com/embed/c9D04BWvpBc >}}\n\n\n   A deep dive into concepts behind linear programming\n   {{< video https://www.youtube.com/embed/E72DWgKP_1Y >}} \n\n\n   {{< video https://www.youtube.com/embed/qQFAvPF2OSI >}}\n\n\n   Using PulP in python\n   {{< video https://www.youtube.com/embed/qa4trkLfvwQ >}}\n  \n\n\nGoing forward, when I come across an interesting LP problem, I will update this post. For now, LP was fun learning. I have barely scratched the surface here. \n\nMore fun to be had!  \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}