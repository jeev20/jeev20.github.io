{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Useful linux commands\n",
        "description: \"Some of my frequently used linux commands\"\n",
        "author: \"Jeevith Hegde\"\n",
        "format: html\n",
        "toc: true\n",
        "lang: en\n",
        "jupyter: python3\n",
        "ipynb-shell-interactivity: all\n",
        "execute:\n",
        "  echo: false\n",
        "date: 2024-05-23\n",
        "categories: [\"scripts\"]\n",
        "tags: [\"bash\", \"linux\"]\n",
        "comments:\n",
        "  giscus:\n",
        "    repo: jeev20/jeev20.github.io\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "The aim with this post is to centralize all my most used linux commands and their different use case descriptions using the tldr module.  \n",
        "\n",
        "Someday when I wonder what the syntax was for a command, I have a place to refer, hopefully! \n",
        "\n",
        "### `scp`\n",
        "```{.bash}\n",
        "scp\n",
        "\n",
        "  Secure copy.\n",
        "  Copy files between hosts using Secure Copy Protocol over SSH.\n",
        "  More information: https://man.openbsd.org/scp.\n",
        "\n",
        "  - Copy a local file to a remote host:\n",
        "    scp path/to/local_file remote_host:path/to/remote_file\n",
        "\n",
        "  - Use a specific port when connecting to the remote host:\n",
        "    scp -P port path/to/local_file remote_host:path/to/remote_file\n",
        "\n",
        "  - Copy a file from a remote host to a local directory:\n",
        "    scp remote_host:path/to/remote_file path/to/local_directory\n",
        "\n",
        "  - Recursively copy the contents of a directory from a remote host to a local directory:\n",
        "    scp -r remote_host:path/to/remote_directory path/to/local_directory\n",
        "\n",
        "  - Copy a file between two remote hosts transferring through the local host:\n",
        "    scp -3 host1:path/to/remote_file host2:path/to/remote_directory\n",
        "\n",
        "  - Use a specific username when connecting to the remote host:\n",
        "    scp path/to/local_file remote_username@remote_host:path/to/remote_directory\n",
        "\n",
        "  - Use a specific SSH private key for authentication with the remote host:\n",
        "    scp -i ~/.ssh/private_key path/to/local_file remote_host:path/to/remote_file\n",
        "\n",
        "  - Use a specific proxy when connecting to the remote host:\n",
        "    scp -J proxy_username@proxy_host path/to/local_file remote_host:path/to/remote_file\n",
        "\n",
        "```\n",
        "\n",
        "### where \n",
        "```{.bash}\n",
        "where\n",
        "\n",
        "  Reports all known instances of a command.\n",
        "  It could be an executable in the PATH environment variable, an alias, or a shell builtin.\n",
        "  More information: https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html.\n",
        "\n",
        "  - Find all instances of a command:\n",
        "    where command\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "### make\n",
        "```{.bash}\n",
        "make\n",
        "\n",
        "  Task runner for targets described in Makefile.\n",
        "  Mostly used to control the compilation of an executable from source code.\n",
        "  More information: https://www.gnu.org/software/make/manual/make.html.\n",
        "\n",
        "  - Call the first target specified in the Makefile (usually named \"all\"):\n",
        "    make\n",
        "\n",
        "  - Call a specific target:\n",
        "    make target\n",
        "\n",
        "  - Call a specific target, executing 4 jobs at a time in parallel:\n",
        "    make -j4 target\n",
        "\n",
        "  - Use a specific Makefile:\n",
        "    make --file path/to/file\n",
        "\n",
        "  - Execute make from another directory:\n",
        "    make --directory path/to/directory\n",
        "\n",
        "  - Force making of a target, even if source files are unchanged:\n",
        "    make --always-make target\n",
        "\n",
        "  - Override a variable defined in the Makefile:\n",
        "    make target variable=new_value\n",
        "\n",
        "  - Override variables defined in the Makefile by the environment:\n",
        "    make --environment-overrides target\n",
        "\n",
        "```\n",
        "### ssh\n",
        "```{.bash}\n",
        "ssh\n",
        "\n",
        "  Secure Shell is a protocol used to securely log onto remote systems.\n",
        "  It can be used for logging or executing commands on a remote server.\n",
        "  More information: https://man.openbsd.org/ssh.\n",
        "\n",
        "  - Connect to a remote server:\n",
        "    ssh username@remote_host\n",
        "\n",
        "  - Connect to a remote server with a specific identity (private key):\n",
        "    ssh -i path/to/key_file username@remote_host\n",
        "\n",
        "  - Connect to a remote server using a specific [p]ort:\n",
        "    ssh username@remote_host -p 2222\n",
        "\n",
        "  - Run a command on a remote server with a [t]ty allocation allowing interaction with the remote command:\n",
        "    ssh username@remote_host -t command command_arguments\n",
        "\n",
        "  - SSH tunneling: [D]ynamic port forwarding (SOCKS proxy on localhost:1080):\n",
        "    ssh -D 1080 username@remote_host\n",
        "\n",
        "  - SSH tunneling: Forward a specific port (localhost:9999 to example.org:80) along with disabling pseudo-[T]ty allocation and executio[N] of remote commands:\n",
        "    ssh -L 9999:example.org:80 -N -T username@remote_host\n",
        "\n",
        "  - SSH [J]umping: Connect through a jumphost to a remote server (Multiple jump hops may be specified separated by comma characters):\n",
        "    ssh -J username@jump_host username@remote_host\n",
        "\n",
        "  - Agent forwarding: Forward the authentication information to the remote machine (see man ssh_config for available options):\n",
        "    ssh -A username@remote_host\n",
        "```\n",
        "\n",
        "### shutdown\n",
        "```{.bash}\n",
        "shutdown\n",
        "\n",
        "  Shutdown and reboot the system.\n",
        "  More information: https://manned.org/shutdown.8.\n",
        "\n",
        "  - Power off ([h]alt) immediately:\n",
        "    shutdown -h now\n",
        "\n",
        "  - [r]eboot immediately:\n",
        "    shutdown -r now\n",
        "\n",
        "  - [r]eboot in 5 minutes:\n",
        "    shutdown -r +5 &\n",
        "\n",
        "  - Shutdown at 1:00 pm (Uses 24[h] clock):\n",
        "    shutdown -h 13:00\n",
        "\n",
        "  - [c]ancel a pending shutdown/reboot operation:\n",
        "    shutdown -c\n",
        "```\n",
        "\n",
        "### docker\n",
        "```{.bash}\n",
        "docker\n",
        "\n",
        "  Manage Docker containers and images.\n",
        "  Some subcommands such as docker run have their own usage documentation.\n",
        "  More information: https://docs.docker.com/engine/reference/commandline/cli/.\n",
        "\n",
        "  - List all Docker containers (running and stopped):\n",
        "    docker ps --all\n",
        "\n",
        "  - Start a container from an image, with a custom name:\n",
        "    docker run --name container_name image\n",
        "\n",
        "  - Start or stop an existing container:\n",
        "    docker start|stop container_name\n",
        "\n",
        "  - Pull an image from a Docker registry:\n",
        "    docker pull image\n",
        "\n",
        "  - Display the list of already downloaded images:\n",
        "    docker images\n",
        "\n",
        "  - Open an [i]nteractive [t]ty with Bourne shell (sh) inside a running container:\n",
        "    docker exec -it container_name sh\n",
        "\n",
        "  - Remove a stopped container:\n",
        "    docker rm container_name\n",
        "\n",
        "  - Fetch and follow the logs of a container:\n",
        "    docker logs -f container_name\n",
        "```"
      ],
      "id": "9641bf3d"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/wslap/Documents/jeev20.github.io/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}