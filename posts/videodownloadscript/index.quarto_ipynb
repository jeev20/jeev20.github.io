{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Video download script\n",
        "description: \"Automating downloading YouTube videos/audio for personal use\"\n",
        "format: html\n",
        "toc: true\n",
        "lang: en\n",
        "jupyter: python3\n",
        "ipynb-shell-interactivity: all\n",
        "execute:\n",
        "  echo: false\n",
        "date: 2024-06-10\n",
        "categories: [\"automation\"]\n",
        "tags: [\"yt-dlp\", \"jellyfin\", \"bash script\"]\n",
        "comments:\n",
        "  giscus:\n",
        "    repo: jeev20/jeev20.github.io\n",
        "---\n",
        "\n",
        "\n",
        "Being a dad comes with opportunities to automate mundane chores. To curate a sensible kids video collection, I have to download select videos from YouTube. To organize this content, I have recently setup a container running the [jellyfin](https://jellyfin.org) media (offline) server. This exercise of curation and downloading videos manually requires a lot of unnecessary effort and should be have been automated. \n",
        "\n",
        " \n",
        "*Yes, it is time to automate!*\n",
        "\n",
        "\n",
        "### Solution architecture\n",
        "Below is the solution architecture. The input or the video urls are saved on a csv with headers `VideoURL` & `Type`. \n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "\n",
        "---\n",
        "title: Video download automation\n",
        "---\n",
        "flowchart TD\n",
        "subgraph 0[Video download]\n",
        "1[RequiredVideos.csv] -.-> |VideoURL, <br> Type| 2[ytDownload.sh<br>yt-dlp]\n",
        "\n",
        "2 -.->|mkdir| 3[Folder_Category_1]\n",
        "\n",
        "2 -.->|mkdir| 4[Folder_Category_2]\n",
        "2  -.-> |mkdir| 5[Folder_Category_N]\n",
        "\n",
        "3 -.->|Download video, description, <br> thumbnail, subtitles| 6[Individual_VideoFiles]\n",
        "end\n",
        "\n",
        "6 -.-> |Copy|7\n",
        "\n",
        "subgraph Jellyfin server\n",
        "        10[Jellyfin_Server]\n",
        "        7[Folder_Category_1]\n",
        "        8[Folder_Category_2]\n",
        "        9[Folder_Category_N]\n",
        "    end\n",
        "  \n",
        "subgraph Tools used\n",
        "11[Bash<br>yt-dlp<br>github <br>Jellyfin]\n",
        "end\n",
        "```\n",
        "\n",
        "This `.csv` file then is an input file to a `bash` script. The `bash` script iterates over the rows in the csv file and uses the [yt-dlp](https://github.com/yt-dlp/yt-dlp.git) project/cli tool to download videos. In short, it will help me build a video collection (for personal use) with minimal resistance. \n",
        "\n",
        "The next time when I or my wife want to add a video, we add a row in the `.csv` file with the video url and a corresponding type (category). \n",
        "\n",
        "\n",
        "### ytDownload.sh script \n",
        "\n",
        "```{.bash}\n",
        "#!/bin/bash\n",
        "\n",
        "# Reading the csv file and using Videos column\n",
        "VIDEO_URLS= readarray -t eCollection < <(cut -d, -f1,2 RequiredVideos.csv)\n",
        "\n",
        "# Set the directory where you want to save the downloaded files\n",
        "OUTPUT_DIR=\".\"\n",
        "\n",
        "# Create the output directory if it doesn't exist\n",
        "mkdir -p \"$OUTPUT_DIR\"\n",
        "\n",
        "for row in ${eCollection[@]:1} \n",
        "do\n",
        "url=$(echo \"$row\" | cut -d, -f1)\n",
        "typeVideo=$(echo \"$row\" | cut -d, -f2)\n",
        "echo \"Starting to download : \"$url\" \"\n",
        "# Download the video and its subtitles no special characters do not overwrite video if already found(if available)\n",
        "yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]' --write-auto-sub --write-description --sub-lang en --restrict-filename --no-force-overwrites --output \"$typeVideo/%(title)s/%(title)s\" \"$url\"\n",
        "echo \"Completed download : \"$url\" \"\n",
        "done\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "#### Command explanation\n",
        "* Get the best video resolution, \n",
        "* Best audio quality, \n",
        "* Download subtitles if available in english, \n",
        "* Download description if available, \n",
        "* Remove symbols and special characters from video filename, \n",
        "* Skip download if resource already found in target folder, \n",
        "* Save to respective `type/videofilename` folder \n",
        "\n",
        "```{.bash}\n",
        "yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]' --write-auto-sub --write-description \\\n",
        " --sub-lang en --restrict-filename --no-force-overwrites --output \"$typeVideo/%(title)s/%(title)s\" \"$url\"\n",
        "```\n",
        "\n",
        "### Further improvements \n",
        "The input `.csv` should be made accessible via a network-attached-storage device which supports a native mobile app. This way we always have access to the input file.\n",
        "\n",
        "A further step would be to run a cron job on a server to look for new rows added in the `.csv` file and run the script. This will ensure that my `jellyfin` collection is always up-to-date. \n",
        "\n",
        "\n",
        "\n",
        "### Credits\n",
        "\n",
        "Thank you to all the maintainers of [yt-dlp](https://github.com/yt-dlp/yt-dlp.git)!"
      ],
      "id": "1f241823"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/home/wslap/Documents/jeev20.github.io/.venv/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}